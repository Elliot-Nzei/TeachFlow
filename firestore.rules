/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data,
 *              allowing users to manage their own data while restricting access to others' data.
 *              Marketplace products are publicly readable but only writable by marketplace admins.
 *
 * Data Structure:
 * - /users/{userId}: User profiles and settings, owned by the user.
 * - /parents/{parentId}: Parent profiles. Parents can create their own accounts.
 * - /marketplace_products/{productId}: Products for sale, managed by marketplace admins.
 * - /users/{userId}/classes/{classId}: Classes created by the user.
 * - /users/{userId}/students/{studentId}: Students created by the user.
 * - /users/{userId}/subjects/{subjectId}: Subjects created by the user.
 * - /users/{userId}/grades/{gradeId}: Grades created by the user.
 * - /users/{userId}/attendance/{attendanceId}: Attendance records created by the user.
 * - /users/{userId}/traits/{traitId}: Trait records created by the user.
 * - /users/{userId}/payments/{paymentId}: Payment records created by the user.
 * - /users/{userId}/incomingTransfers/{transferId}: Incoming transfer requests.
 * - /users/{userId}/outgoingTransfers/{transferId}: Outgoing transfer requests.
 * - /users/{userId}/timetables/{timetableId}: Timetables created by the user.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the user's ID.
 * - Listing the root collection is denied to prevent unauthorized data discovery.
 * - Marketplace products are publicly readable, but creation/modification is restricted to marketplace admins.
 * - Data consistency is enforced where possible by comparing document IDs with user IDs.
 * - Write operations MUST NEVER use `if true;`. All writes must be protected by an authorization check (e.g., `isOwner()`).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level listing is not allowed. This prevents unauthenticated
     *              or unauthorized users from discovering collections in the database.
     * @path /databases/{database}/documents
     * @allow (list) -
     * @deny (list) Any request.
     * @principle Prevents unauthorized collection discovery.
     */
    match /{path=**} {
      allow list: if false;
    }

    /**
     * @description Allows a user to manage their own profile.
     * @path /users/{userId}
     * @allow (create) If the user's ID matches the document ID.
     * @allow (get, update, delete) If the user is the owner of the document.
     * @deny (create) If the user's ID does not match the document ID.
     * @deny (get, update, delete) If the user is not the owner of the document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userCode == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userCode == resource.data.userCode;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a parent to manage their own profile.
     *              Parents can create their own account and link their students.
     * @path /parents/{parentId}
     * @allow (create) If the user is signed in and the parentId matches request.auth.uid.
     * @allow (get, update, delete) If the user is the owner of the document.
     * @deny (create) If the parentId does not match request.auth.uid.
     * @deny (get, update, delete) If the user is not the owner of the document.
     * @principle Enforces document ownership for writes.
     */
     match /parents/{parentId} {
        allow create: if isSignedIn() && isOwner(parentId);
        allow get: if isSignedIn() && isOwner(parentId);
        allow list: if false;
        allow update: if isSignedIn() && isExistingOwner(parentId);
        allow delete: if isSignedIn() && isExistingOwner(parentId);
    }

    /**
     * @description Allows marketplace admins to manage products, and allows anyone to read them.
     * @path /marketplace_products/{productId}
     * @allow (get, list) Any user can read the products.
     * @allow (create, update, delete) Only marketplace admins can write.
     * @deny (create, update, delete) If the user is not a marketplace admin.
     * @principle Open reads, restricted writes based on user role.
     */
    match /marketplace_products/{productId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows a user to manage their own classes.
     * @path /users/{userId}/classes/{classId}
     * @allow (create) If the user is signed in and owns the class.
     * @allow (get, list, update, delete) If the user is the owner of the class.
     * @deny (create, update, delete) If the user is not the owner of the class.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/classes/{classId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own students.
     * @path /users/{userId}/students/{studentId}
     * @allow (create) If the user is signed in and owns the student.
     * @allow (get, list, update, delete) If the user is the owner of the student.
     * @deny (create, update, delete) If the user is not the owner of the student.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/students/{studentId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.parentId != null;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own subjects.
     * @path /users/{userId}/subjects/{subjectId}
     * @allow (create) If the user is signed in and owns the subject.
     * @allow (get, list, update, delete) If the user is the owner of the subject.
     * @deny (create, update, delete) If the user is not the owner of the subject.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/subjects/{subjectId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own grades.
     * @path /users/{userId}/grades/{gradeId}
     * @allow (create) If the user is signed in and owns the grade.
     * @allow (get, list, update, delete) If the user is the owner of the grade.
     * @deny (create, update, delete) If the user is not the owner of the grade.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/grades/{gradeId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own attendance records.
     * @path /users/{userId}/attendance/{attendanceId}
     * @allow (create) If the user is signed in and owns the attendance record.
     * @allow (get, list, update, delete) If the user is the owner of the attendance record.
     * @deny (create, update, delete) If the user is not the owner of the attendance record.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/attendance/{attendanceId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own trait records.
     * @path /users/{userId}/traits/{traitId}
     * @allow (create) If the user is signed in and owns the trait record.
     * @allow (get, list, update, delete) If the user is the owner of the trait record.
     * @deny (create, update, delete) If the user is not the owner of the trait record.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/traits/{traitId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own payment records.
     * @path /users/{userId}/payments/{paymentId}
     * @allow (create) If the user is signed in and owns the payment record.
     * @allow (get, list, update, delete) If the user is the owner of the payment record.
     * @deny (create, update, delete) If the user is not the owner of the payment record.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/payments/{paymentId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own incoming transfer requests.
     * @path /users/{userId}/incomingTransfers/{transferId}
     * @allow (create) If the user is signed in and owns the transfer request.
     * @allow (get, list, update, delete) If the user is the owner of the transfer request.
     * @deny (create, update, delete) If the user is not the owner of the transfer request.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/incomingTransfers/{transferId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own outgoing transfer requests.
     * @path /users/{userId}/outgoingTransfers/{transferId}
     * @allow (create) If the user is signed in and owns the transfer request.
     * @allow (get, list, update, delete) If the user is the owner of the transfer request.
     * @deny (create, update, delete) If the user is not the owner of the transfer request.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outgoingTransfers/{transferId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own timetables.
     * @path /users/{userId}/timetables/{timetableId}
     * @allow (create) If the user is signed in and owns the timetable.
     * @allow (get, list, update, delete) If the user is the owner of the timetable.
     * @deny (create, update, delete) If the user is not the owner of the timetable.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/timetables/{timetableId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, list: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'marketplace_admin';
    }
  }
}