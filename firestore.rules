rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- USER PROFILE ---
    match /users/{userId} {
      // Allow users to get their own profile, and allow any signed-in user to query the collection
      // (e.g., to find another user by their userCode for transfers).
      allow get: if isOwner(userId);
      allow list: if isSignedIn();
      allow create, update, delete: if isOwner(userId);

      // --- SUBCOLLECTION RULES ---

      // Rule for classes
      match /classes/{classId} {
        allow read, write: if isOwner(userId);
      }

      // Rule for students
      match /students/{studentId} {
        allow read, write: if isOwner(userId);
      }

      // Rule for subjects
      match /subjects/{subjectId} {
        allow read, write: if isOwner(userId);
      }

      // Rule for grades
      match /grades/{gradeId} {
        allow read, write: if isOwner(userId);
      }

      // Rule for attendance
      match /attendance/{attendanceId} {
        allow read, write: if isOwner(userId);
      }

      // Rule for traits
      match /traits/{traitId} {
        allow read, write: if isOwner(userId);
      }

      // Rule for outgoing transfers
      match /outgoingTransfers/{transferId} {
        allow read, write: if isOwner(userId);
      }
      
      // Rule for incoming transfers
      match /incomingTransfers/{transferId} {
        // The recipient can read, update, and delete their incoming requests.
        allow read, update, delete: if isOwner(userId);

        // A different user (the sender) can create a transfer request in the recipient's inbox.
        // This is secure because we validate the IDs in the document.
        allow create: if isSignedIn()
                      && request.resource.data.toUserId == userId
                      && request.resource.data.fromUserId == request.auth.uid;
      }
    }
  }
}
