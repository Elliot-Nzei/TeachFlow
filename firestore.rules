/**
 * @fileoverview Firestore Security Rules for the Nigerian School Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only access data under their own user ID.
 *
 * Data Structure:
 * All data (classes, students, subjects, grades) is nested under the /users/{userId} collection, where {userId} is the Firebase Auth UID.
 * The /transfers collection is a global log intended for administrative use.
 *
 * Key Security Decisions:
 * - Users can only list data within their own /users/{userId} tree.
 * - The /transfers collection is write-only by a trusted source.
 * - All write operations require a valid, authenticated user.
 *
 * Denormalization for Authorization:
 *  - The rules rely on the path `/users/{userId}` matching the authenticated user's UID. This avoids the need to store the user ID within the document itself and simplifies ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - If the authenticated user's UID matches the userId.
     * @allow (get, list, update, delete) - If the authenticated user's UID matches the userId.
     * @deny (create) - If the authenticated user is not signed in.
     * @deny (get, list, update, delete) - If the authenticated user's UID does not match the userId.
     * @principle Enforces document ownership, allowing users to only manage their own profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to classes created by a user.
     * @path /databases/{database}/documents/users/{userId}/classes/{classId}
     * @allow (create, get, list, update, delete) - If the authenticated user's UID matches the userId.
     * @deny (create, get, list, update, delete) - If the authenticated user is not the owner.
     * @principle Enforces user-ownership for managing classes.
     */
    match /users/{userId}/classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to students belonging to a user/school.
     * @path /databases/{database}/documents/users/{userId}/students/{studentId}
     * @allow (create, get, list, update, delete) - If the authenticated user's UID matches the userId.
     * @deny (create, get, list, update, delete) - If the authenticated user is not the owner.
     * @principle Enforces user-ownership for managing student records.
     */
    match /users/{userId}/students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the master list of subjects for a user/school.
     * @path /databases/{database}/documents/users/{userId}/subjects/{subjectId}
     * @allow (create, get, list, update, delete) - If the authenticated user's UID matches the userId.
     * @deny (create, get, list, update, delete) - If the authenticated user is not the owner.
     * @principle Enforces user-ownership for managing the list of subjects.
     */
    match /users/{userId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to grades entered by a specific user.
     * @path /databases/{database}/documents/users/{userId}/grades/{gradeId}
     * @allow (create, get, list, update, delete) - If the authenticated user's UID matches the userId.
     * @deny (create, get, list, update, delete) - If the authenticated user is not the owner.
     * @principle Enforces user-ownership for managing grades.
     */
    match /users/{userId}/grades/{gradeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to the global log of data transfers.
     * @path /databases/{database}/documents/transfers/{transferId}
     * @allow (create) - If the request comes from a trusted source (e.g., Cloud Functions).
     * @deny (get, list, update, delete) - No direct client access.
     * @principle Restricts write access to a trusted environment.
     */
    match /transfers/{transferId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Replace with a check for a trusted environment.
      allow update: if false;
      allow delete: if false;
    }
  }
}