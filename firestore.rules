/**
 * @fileoverview Firestore Security Rules for the Nigerian School Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, where {userId} corresponds to the Firebase Auth UID.
 * There is also a top-level /transfers collection that is writable only by backend.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data under /users/{userId}.
 * - Listing of users is disallowed.
 * - The 'transfers' collection is writeable only by backend.
 *
 * Denormalization for Authorization:
 * No specific denormalization is required, as the user-centric data model allows for simple path-based authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the user profile. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow create: if isSignedIn() && isOwner(userId)
     * @allow get: if isSignedIn() && isOwner(userId)
     * @allow update: if isSignedIn() && isOwner(userId)
     * @allow delete: if isSignedIn() && isOwner(userId)
     * @deny list: Listing all users is not permitted.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userCode == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && request.resource.data.userCode == resource.data.userCode;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;

      /**
       * @description Secures classes created by a specific user.
       * @path /users/{userId}/classes/{classId}
       * @allow create: if isSignedIn() && isOwner(userId)
       * @allow get: if isSignedIn() && isOwner(userId)
       * @allow list: if isSignedIn() && isOwner(userId)
       * @allow update: if isSignedIn() && isOwner(userId)
       * @allow delete: if isSignedIn() && isOwner(userId)
       * @principle Restricts access to a user's own data tree.
       */
      match /classes/{classId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId) && resource != null;
        allow delete: if isSignedIn() && isOwner(userId) && resource != null;
      }

      /**
       * @description Secures students belonging to a specific user/school.
       * @path /users/{userId}/students/{studentId}
       * @allow create: if isSignedIn() && isOwner(userId)
       * @allow get: if isSignedIn() && isOwner(userId)
       * @allow list: if isSignedIn() && isOwner(userId)
       * @allow update: if isSignedIn() && isOwner(userId)
       * @allow delete: if isSignedIn() && isOwner(userId)
       * @principle Restricts access to a user's own data tree.
       */
      match /students/{studentId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId) && resource != null;
        allow delete: if isSignedIn() && isOwner(userId) && resource != null;
      }

      /**
       * @description Secures the master list of subjects for a user/school.
       * @path /users/{userId}/subjects/{subjectId}
       * @allow create: if isSignedIn() && isOwner(userId)
       * @allow get: if isSignedIn() && isOwner(userId)
       * @allow list: if isSignedIn() && isOwner(userId)
       * @allow update: if isSignedIn() && isOwner(userId)
       * @allow delete: if isSignedIn() && isOwner(userId)
       * @principle Restricts access to a user's own data tree.
       */
      match /subjects/{subjectId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId) && resource != null;
        allow delete: if isSignedIn() && isOwner(userId) && resource != null;
      }

      /**
       * @description Secures all grades entered by a specific user.
       * @path /users/{userId}/grades/{gradeId}
       * @allow create: if isSignedIn() && isOwner(userId)
       * @allow get: if isSignedIn() && isOwner(userId)
       * @allow list: if isSignedIn() && isOwner(userId)
       * @allow update: if isSignedIn() && isOwner(userId)
       * @allow delete: if isSignedIn() && isOwner(userId)
       * @principle Restricts access to a user's own data tree.
       */
      match /grades/{gradeId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId) && resource != null;
        allow delete: if isSignedIn() && isOwner(userId) && resource != null;
      }

       /**
        * @description Secures daily attendance records for students.
        * @path /users/{userId}/attendance/{attendanceId}
        * @allow create: if isSignedIn() && isOwner(userId)
        * @allow get: if isSignedIn() && isOwner(userId)
        * @allow list: if isSignedIn() && isOwner(userId)
        * @allow update: if isSignedIn() && isOwner(userId)
        * @allow delete: if isSignedIn() && isOwner(userId)
        * @principle Restricts access to a user's own data tree.
        */
      match /attendance/{attendanceId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId) && resource != null;
        allow delete: if isSignedIn() && isOwner(userId) && resource != null;
      }

      /**
       * @description Secures a user's personal log of outgoing data transfer requests.
       * @path /users/{userId}/transfers/{transferId}
       * @allow create: if isSignedIn() && isOwner(userId)
       * @allow get: if isSignedIn() && isOwner(userId)
       * @allow list: if isSignedIn() && isOwner(userId)
       * @allow update: if isSignedIn() && isOwner(userId)
       * @allow delete: if isSignedIn() && isOwner(userId)
       * @principle Restricts access to a user's own data tree.
       */
      match /transfers/{transferId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if isSignedIn() && isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId) && resource != null;
        allow delete: if isSignedIn() && isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Global log of data transfers. Writable by a Cloud Function.
     * @path /transfers/{transferId}
     * @allow get: if false;
     * @allow list: if false;
     * @allow create: if false; // TODO: Implement backend-only writes.
     * @allow update: if false; // TODO: Implement backend-only writes.
     * @allow delete: if false; // TODO: Implement backend-only writes.
     * @principle Restricts write access to a backend service account.
     */
    match /transfers/{transferId} {
      allow get: if false;
      allow list: if false;
      allow create: if false; // TODO: Implement backend-only writes.
      allow update: if false; // TODO: Implement backend-only writes.
      allow delete: if false; // TODO: Implement backend-only writes.
    }
  }
}