rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (create) - User with matching ID creates their profile.
     * @allow (get, update, delete) - User with matching ID reads/updates/deletes their profile.
     * @deny (create) - User attempts to create profile with mismatched ID.
     * @deny (get, update, delete) - User attempts to read/update/delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a parent to create, read, update, and delete their own profile.
     * @path /parents/{parentId}
     * @allow (create) - Parent with matching ID creates their profile.
     * @allow (get, update, delete) - Parent with matching ID reads/updates/deletes their profile.
     * @deny (create) - Parent attempts to create profile with mismatched ID.
     * @deny (get, update, delete) - Parent attempts to read/update/delete another parent's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /parents/{parentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(parentId) {
        return request.auth.uid == parentId;
      }
      function isExistingOwner(parentId) {
        return isOwner(parentId) && exists(resource);
      }

      allow get: if isOwner(parentId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(parentId);
      allow update: if isExistingOwner(parentId);
      allow delete: if isExistingOwner(parentId);
    }

    /**
     * @description Allows anyone to read marketplace products, but restricts write access.
     * @path /marketplace_products/{productId}
     * @allow (get, list) - Any user can read/list products.
     * @deny (create, update, delete) - Only marketplace admins should be able to create/update/delete.
     * @principle Public read, restricted write access.
     */
    match /marketplace_products/{productId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add marketplace admin check
      allow update: if false; // TODO: Add marketplace admin check
      allow delete: if false; // TODO: Add marketplace admin check
    }

    /**
     * @description Allows a user to read and write their own classes.
     * @path /users/{userId}/classes/{classId}
     * @allow (create) - User with matching ID creates a class.
     * @allow (get, list, update, delete) - User with matching ID reads/lists/updates/deletes their classes.
     * @deny (create) - User attempts to create a class with mismatched ID.
     * @deny (get, list, update, delete) - User attempts to read/list/update/delete another user's classes.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/classes/{classId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own students.
     * @path /users/{userId}/students/{studentId}
     * @allow (create) - User with matching ID creates a student.
     * @allow (get, list, update, delete) - User with matching ID reads/lists/updates/deletes their students.
     * @deny (create) - User attempts to create a student with mismatched ID.
     * @deny (get, list, update, delete) - User attempts to read/list/update/delete another user's students.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/students/{studentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own subjects.
     * @path /users/{userId}/subjects/{subjectId}
     * @allow (create) - User with matching ID creates a subject.
     * @allow (get, list, update, delete) - User with matching ID reads/lists/updates/deletes their subjects.
     * @deny (create) - User attempts to create a subject with mismatched ID.
     * @deny (get, list, update, delete) - User attempts to read/list/update/delete another user's subjects.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own grades.
     * @path /users/{userId}/grades/{gradeId}
     * @allow (create) - User with matching ID creates a grade.
     * @allow (get, list, update, delete) - User with matching ID reads/lists/updates/deletes their grades.
     * @deny (create) - User attempts to create a grade with mismatched ID.
     * @deny (get, list, update, delete) - User attempts to read/list/update/delete another user's grades.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/grades/{gradeId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own attendance records.
     * @path /users/{userId}/attendance/{attendanceId}
     * @allow (create) - User with matching ID creates an attendance record.
     * @allow (get, list, update, delete) - User with matching ID reads/lists/updates/deletes their attendance records.
     * @deny (create) - User attempts to create an attendance record with mismatched ID.
     * @deny (get, list, update, delete) - User attempts to read/list/update/delete another user's attendance records.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/attendance/{attendanceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own trait records.
     * @path /users/{userId}/traits/{traitId}
     * @allow (create) - User with matching ID creates a trait record.
     * @allow (get, list, update, delete) - User with matching ID reads/lists/updates/deletes their trait records.
     * @deny (create) - User attempts to create a trait record with mismatched ID.
     * @deny (get, list, update, delete) - User attempts to read/list/update/delete another user's trait records.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/traits/{traitId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own incoming transfer requests.
     * @path /users/{userId}/incomingTransfers/{transferId}
     * @allow (create) - User with matching ID creates an incoming transfer request.
     * @allow (get, list, update, delete) - User with matching ID reads/lists/updates/deletes their incoming transfer requests.
     * @deny (create) - User attempts to create an incoming transfer request with mismatched ID.
     * @deny (get, list, update, delete) - User attempts to read/list/update/delete another user's incoming transfer requests.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/incomingTransfers/{transferId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and write their own outgoing transfer requests.
     * @path /users/{userId}/outgoingTransfers/{transferId}
     * @allow (create) - User with matching ID creates an outgoing transfer request.
     * @allow (get, list, update, delete) - User with matching ID reads/lists/updates/deletes their outgoing transfer requests.
     * @deny (create) - User attempts to create an outgoing transfer request with mismatched ID.
     * @deny (get, list, update, delete) - User attempts to read/list/update/delete another user's outgoing transfer requests.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/outgoingTransfers/{transferId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Allows a user to read and write their own payment records.
     * @path /users/{userId}/payments/{paymentId}
     * @allow (create) - User with matching ID creates a payment record.
     * @allow (get, list, update, delete) - User with matching ID reads/lists/updates/deletes their payment records.
     * @deny (create) - User attempts to create a payment record with mismatched ID.
     * @deny (get, list, update, delete) - User attempts to read/list/update/delete another user's payment records.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Allows a user to read and write their own timetables.
     * @path /users/{userId}/timetables/{timetableId}
     * @allow (create) - User with matching ID creates a timetable.
     * @allow (get, list, update, delete) - User with matching ID reads/lists/updates/deletes their timetables.
     * @deny (create) - User attempts to create a timetable with mismatched ID.
     * @deny (get, list, update, delete) - User attempts to read/list/update/delete another user's timetables.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/timetables/{timetableId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}