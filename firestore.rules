/**
 * @fileoverview Firestore Security Rules for the Nigerian School Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data and
 * enables controlled data sharing via explicit transfer requests. Data validation is relaxed for prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user information.  Write access is restricted to the user themselves.
 * - /users/{userId}/classes/{classId}: Stores class data owned by the user.
 * - /users/{userId}/students/{studentId}: Stores student data owned by the user.
 * - /users/{userId}/subjects/{subjectId}: Stores subject data owned by the user.
 * - /users/{userId}/grades/{gradeId}: Stores grade data owned by the user.
 * - /users/{userId}/attendance/{attendanceId}: Stores attendance data owned by the user.
 * - /users/{userId}/payments/{paymentId}: Stores payment data owned by the user.
 * - /users/{userId}/incomingTransfers/{transferId}: Stores incoming transfer requests for the user.
 * - /users/{userId}/outgoingTransfers/{transferId}: Stores outgoing transfer requests initiated by the user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data under `/users/{userId}`.
 * - Data transfers are mediated by explicitly created transfer request documents.
 * - Listing of user documents is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Data ownership is enforced by matching the `userId` path segment with the `request.auth.uid`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the provided userId matches the authenticated user's UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user exists and is the owner.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Root-level rule to prevent unauthorized access.
     * @path /databases/{database}/documents
     * @allow (get, list) if false - No direct access to the root.
     * @deny (create, update, delete) always - No root-level modifications.
     * @principle Prevents unintended access to the entire database.
     */
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) User can create their own document.
     * @allow (get) User can read their own document.
     * @allow (update) User can update their own document.
     * @allow (delete) User can delete their own document.
     * @deny (list) Listing users is not allowed.
     * @allow (create) if true - Placeholder for user creation
     * @allow (get) if true - Placeholder for user creation
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

        /**
     * @description Controls access to class documents nested under a user.
     * @path /users/{userId}/classes/{classId}
     * @allow (create) User can create classes in their own document.
     * @allow (get) User can read classes in their own document.
     * @allow (update) User can update classes in their own document.
     * @allow (delete) User can delete classes in their own document.
     * @allow (list) User can list classes in their own document.
     * @deny If the user is not the owner
     * @principle Enforces user-ownership for classes.
     */
    match /users/{userId}/classes/{classId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to student documents nested under a user.
     * @path /users/{userId}/students/{studentId}
     * @allow (create) User can create students in their own document.
     * @allow (get) User can read students in their own document.
     * @allow (update) User can update students in their own document.
     * @allow (delete) User can delete students in their own document.
     * @allow (list) User can list students in their own document.
     * @deny If the user is not the owner
     * @principle Enforces user-ownership for students.
     */
    match /users/{userId}/students/{studentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to subject documents nested under a user.
     * @path /users/{userId}/subjects/{subjectId}
     * @allow (create) User can create subjects in their own document.
     * @allow (get) User can read subjects in their own document.
     * @allow (update) User can update subjects in their own document.
     * @allow (delete) User can delete subjects in their own document.
     * @allow (list) User can list subjects in their own document.
     * @deny If the user is not the owner
     * @principle Enforces user-ownership for subjects.
     */
    match /users/{userId}/subjects/{subjectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to grade documents nested under a user.
     * @path /users/{userId}/grades/{gradeId}
     * @allow (create) User can create grades in their own document.
     * @allow (get) User can read grades in their own document.
     * @allow (update) User can update grades in their own document.
     * @allow (delete) User can delete grades in their own document.
     * @allow (list) User can list grades in their own document.
     * @deny If the user is not the owner
     * @principle Enforces user-ownership for grades.
     */
    match /users/{userId}/grades/{gradeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to attendance documents nested under a user.
     * @path /users/{userId}/attendance/{attendanceId}
     * @allow (create) User can create attendance records in their own document.
     * @allow (get) User can read attendance records in their own document.
     * @allow (update) User can update attendance records in their own document.
     * @allow (delete) User can delete attendance records in their own document.
     * @allow (list) User can list attendance records in their own document.
     * @deny If the user is not the owner
     * @principle Enforces user-ownership for attendance.
     */
    match /users/{userId}/attendance/{attendanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to payment documents nested under a user.
     * @path /users/{userId}/payments/{paymentId}
     * @allow (create) User can create payments in their own document.
     * @allow (get) User can read payments in their own document.
     * @allow (update) User can update payments in their own document.
     * @allow (delete) User can delete payments in their own document.
     * @allow (list) User can list payments in their own document.
     * @deny If the user is not the owner
     * @principle Enforces user-ownership for payments.
     */
    match /users/{userId}/payments/{paymentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to incoming transfer documents nested under a user.
     * @path /users/{userId}/incomingTransfers/{transferId}
     * @allow (create) User can create incoming transfers in their own document.
     * @allow (get) User can read incoming transfers in their own document.
     * @allow (update) User can update incoming transfers in their own document.
     * @allow (delete) User can delete incoming transfers in their own document.
     * @allow (list) User can list incoming transfers in their own document.
     * @deny If the user is not the owner
     * @principle Enforces user-ownership for incoming transfers.
     */
    match /users/{userId}/incomingTransfers/{transferId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to outgoing transfer documents nested under a user.
     * @path /users/{userId}/outgoingTransfers/{transferId}
     * @allow (create) User can create outgoing transfers in their own document.
     * @allow (get) User can read outgoing transfers in their own document.
     * @allow (update) User can update outgoing transfers in their own document.
     * @allow (delete) User can delete outgoing transfers in their own document.
     * @allow (list) User can list outgoing transfers in their own document.
     * @deny If the user is not the owner
     * @principle Enforces user-ownership for outgoing transfers.
     */
    match /users/{userId}/outgoingTransfers/{transferId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}