/**
 * @fileoverview Firestore Security Rules for the Nigerian School Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for core data (classes, grades, reports, settings).
 * Each user can only access data associated with their own user ID.
 * The 'transfers' collection is an exception, allowing all authenticated users read access and only allowing writing with cloud functions.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /classes/{userId}/{classId}: Stores classes owned by a user.
 * - /grades/{userId}/{studentId}: Stores grades entered by a user for a student.
 * - /reports/{userId}/{reportId}: Stores reports generated by a user.
 * - /transfers/{transferId}: Stores data transfer records (sender and recipient user codes).
 * - /settings/{userId}: Stores user-specific settings.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the path structure.
 * - The 'transfers' collection is readable by any authenticated user. Writes to the 'transfers' collection are only permitted with cloud functions.
 * - Data validation is relaxed to allow for rapid prototyping, focusing only on authorization-critical fields.
 *
 * Denormalization for Authorization:
 * - User documents are expected to contain a `userCode` which is used in the `transfers` collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching UID can access and modify their profile.
     * @deny (create, get, update, delete) - Any other user attempting to access this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Protects classes created by users. Only the owner can read, create, update, or delete their classes.
     * @path /classes/{userId}/{classId}
     * @allow (create) - Authenticated user with matching UID can create a class under their ID.
     * @allow (get, update, delete) - Authenticated user with matching UID can access and modify their classes.
     * @deny (create, get, update, delete) - Any other user attempting to access these classes.
     * @principle Enforces document ownership for all operations.
     */
    match /classes/{userId}/{classId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects grades entered by users. Only the owner can read, create, update, or delete their grades.
     * @path /grades/{userId}/{studentId}
     * @allow (create) - Authenticated user with matching UID can create a grade under their ID.
     * @allow (get, update, delete) - Authenticated user with matching UID can access and modify their grades.
     * @deny (create, get, update, delete) - Any other user attempting to access these grades.
     * @principle Enforces document ownership for all operations.
     */
    match /grades/{userId}/{studentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects reports generated by users. Only the owner can read, create, update, or delete their reports.
     * @path /reports/{userId}/{reportId}
     * @allow (create) - Authenticated user with matching UID can create a report under their ID.
     * @allow (get, update, delete) - Authenticated user with matching UID can access and modify their reports.
     * @deny (create, get, update, delete) - Any other user attempting to access these reports.
     * @principle Enforces document ownership for all operations.
     */
    match /reports/{userId}/{reportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read data transfer records. Writes should be handled by cloud functions.
     * @path /transfers/{transferId}
     * @allow (get, list) - Any authenticated user can read transfer records.
     * @allow (create, update, delete) - Only Cloud Functions can write transfer records.
     * @principle Allows public read access to transfer records, but restricts writes to a trusted server environment.
     */
    match /transfers/{transferId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects user-specific settings. Only the owner can read, create, update, or delete their settings.
     * @path /settings/{userId}
     * @allow (create) - Authenticated user with matching UID can create settings under their ID.
     * @allow (get, update, delete) - Authenticated user with matching UID can access and modify their settings.
     * @deny (create, get, update, delete) - Any other user attempting to access these settings.
     * @principle Enforces document ownership for all operations.
     */
    match /settings/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}