rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the top-level 'users' collection
    match /users/{userId} {
      // Allow users to read their own document
      allow get: if isOwner(userId);
      // Allow any authenticated user to search for other users by userCode (for transfers)
      allow list: if isAuthenticated() && request.query.keys.hasAny(['userCode']);
      // Allow users to create and update their own document
      allow write: if isOwner(userId);

      // Subcollections within a user's document are only accessible by that user.
      match /classes/{classId} {
        allow read, write: if isOwner(userId);
      }
      match /subjects/{subjectId} {
        allow read, write: if isOwner(userId);
      }
      match /grades/{gradeId} {
        allow read, write: if isOwner(userId);
      }
      match /attendance/{attendanceId} {
        allow read, write: if isOwner(userId);
      }
      match /traits/{traitId} {
        allow read, write: if isOwner(userId);
      }
      match /payments/{paymentId} {
        allow read, write: if isOwner(userId);
      }
      match /incomingTransfers/{transferId} {
        allow read: if isOwner(userId);
        allow create: if isAuthenticated() && request.resource.data.toUserId == userId;
        allow update, delete: if isOwner(userId);
      }
      match /outgoingTransfers/{transferId} {
        allow read, write: if isOwner(userId);
        allow get: if isAuthenticated() && resource.data.toUserId == request.auth.uid;
        allow update: if isAuthenticated() &&
                         resource.data.toUserId == request.auth.uid &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'processedAt']);
      }
    }
    
    // Rules for the top-level 'students' collection, accessible by teachers and parents
    match /students/{studentId} {
        // TEACHER ACCESS: Allow a logged-in user to list their own students.
        // This is the key rule that fixes the /students page permission error.
        allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
        
        // TEACHER ACCESS: Allow full read/write access if the user is the owner.
        allow read, write: if request.auth.uid == resource.data.userId;

        // PARENT ACCESS: Also allow public listing ONLY when querying by parentId.
        // This keeps the parent portal functional and secure.
        allow list: if request.auth == null && request.query.keys.hasOnly(['parentId']);
    }
  }
}
