rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- User Data Rules ---
    match /users/{userId} {
      // Allow users to read and update their own profile.
      allow read, update: if isOwner(userId);
      
      // Allow any authenticated user to search for users by their code.
      // This is required for the data transfer feature.
      allow list: if request.auth != null && request.query.keys().hasOnly(['where', 'limit']);

      // --- Subcollection Rules ---

      // Allow users full access to their own subcollections (classes, students, grades, etc.)
      match /classes/{classId} {
        allow read, write: if isOwner(userId);

        // Allow a recipient of a transfer to READ a specific class to accept it.
        allow get: if request.auth != null && exists(
          /databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers/$(transferId)
        ) && get(
          /databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers/$(transferId)
        ).data.fromUserId == userId && get(
          /databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers/$(transferId)
        ).data.dataId == classId;
      }

      match /students/{studentId} {
        allow read, write: if isOwner(userId);

        // Allow a recipient of a transfer to READ a specific student to accept it.
        allow get: if request.auth != null && exists(
          /databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers/$(transferId)
        ) && get(
          /databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers/$(transferId)
        ).data.fromUserId == userId && get(
          /databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers/$(transferId)
        ).data.dataId == studentId;
      }
      
      // Generic rule for all other direct subcollections of a user
      match /subjects/{docId} { allow read, write: if isOwner(userId); }
      match /grades/{docId} { allow read, write: if isOwner(userId); }
      match /attendance/{docId} { allow read, write: if isOwner(userId); }
      match /traits/{docId} { allow read, write: if isOwner(userId); }


      // --- Data Transfer Subcollection Rules ---
      
      // Incoming transfers:
      match /incomingTransfers/{transferId} {
        // User can read and update (accept/reject) their own incoming transfers.
        allow read, update: if isOwner(userId);
        
        // Any authenticated user can create an incoming transfer request FOR this user.
        allow create: if request.auth != null && request.resource.data.toUserId == userId;
      }

      // Outgoing transfers:
      match /outgoingTransfers/{transferId} {
        // User can read and create their own outgoing transfers.
        allow read, create: if isOwner(userId);

        // Allow the RECIPIENT to update the status of the sender's outgoing transfer.
        // This is crucial for keeping the status in sync when they accept/reject.
        allow update: if request.auth != null && 
                         exists(/databases/$(database)/documents/users/$(userId)/outgoingTransfers/$(transferId)) &&
                         get(/databases/$(database)/documents/users/$(userId)/outgoingTransfers/$(transferId)).data.toUserId == request.auth.uid;
      }
    }
  }
}
