rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the top-level 'users' collection
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isAuthenticated(); // For user searches
      allow write: if isOwner(userId);

      // Rules for user-specific subcollections
      match /{subcollection}/{docId} {
        allow read, write, delete: if isOwner(userId);

        match /{nested=**} {
           allow read, write: if isOwner(userId);
        }
      }
    }

    // Rules for the top-level 'students' collection, accessible by teachers and parents
    match /students/{studentId} {
      // TEACHER ACCESS:
      // Allow read/write if the user's UID matches the student's userId field.
      // This applies to get, update, delete operations.
      allow read, write: if request.auth.uid == resource.data.userId;

      // Allow a user to create a student document if they are setting the userId to their own UID.
      allow create: if request.auth.uid == request.resource.data.userId;

      // Allow a user to LIST students only if they are querying for their own students.
      // This rule is critical for the dashboard and students page to work for logged-in users.
      allow list: if isAuthenticated() && request.query.where.size() > 0 && request.query.where[0][0] == 'userId' && request.query.where[0][1] == '==' && request.query.where[0][2] == request.auth.uid;
    }

    // PARENT ACCESS: Anyone can query the students collection if they provide the exact parentId.
    // This rule is separate to allow unauthenticated access for the parent portal.
    match /students/{studentId} {
        allow list: if request.auth == null && request.query.where.size() > 0 && request.query.where[0][0] == 'parentId' && request.query.where[0][1] == '==';
    }
  }
}
