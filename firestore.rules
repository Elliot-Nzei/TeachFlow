rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the top-level 'users' collection
    match /users/{userId} {
      // Allow users to read their own document, but not others'
      allow get: if isOwner(userId);
      // Allow any authenticated user to search for other users (e.g., by userCode for transfers)
      allow list: if isAuthenticated();
      // Allow users to create and update their own document
      allow write: if isOwner(userId);

      // Rules for reading data during a transfer
      match /classes/{classId} {
        // Owner can read their own classes
        allow read: if isOwner(userId);
        // Allow reading if there's a valid incoming transfer for this class
        allow get: if isAuthenticated() && exists(
          /databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers/$(classId)
        );
      }
      
      match /students/{studentId} {
        // Owner can read their own students
        allow read: if isOwner(userId);
        // Allow reading if there's a valid incoming transfer for this student
        allow get: if isAuthenticated() && exists(
          /databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers/$(studentId)
        );
      }

      // Rules for managing transfers
      match /incomingTransfers/{transferId} {
        // User can read their own incoming transfers
        allow read: if isOwner(userId);
        // Any authenticated user can create an incoming transfer for another user
        allow create: if isAuthenticated() && request.resource.data.toUserId == userId;
        // User can update and delete their own incoming transfer
        allow update, delete: if isOwner(userId);
      }

      match /outgoingTransfers/{transferId} {
        // User can read and write their own outgoing transfers
        allow read, write: if isOwner(userId);
        
        // CRITICAL FIX: Allow the recipient to read a specific outgoing transfer
        allow get: if isAuthenticated() && resource.data.toUserId == request.auth.uid;
        
        // CRITICAL FIX: Allow the recipient to update the sender's outgoing transfer status
        allow update: if isAuthenticated() && 
                         resource.data.toUserId == request.auth.uid;
      }

      // Securely grant access to all other subcollections (subjects, grades, etc.)
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);

        match /{nested=**} {
           allow read, write: if isOwner(userId);
        }
      }
    }
  }
}
