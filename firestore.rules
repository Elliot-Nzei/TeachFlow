rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the requesting user has the 'admin' role in their own user document.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the top-level 'users' collection
    match /users/{userId} {
      // An admin can read any user's document.
      // A user can read or write their own document.
      allow get: if isAdmin() || isOwner(userId);
      allow list: if isAdmin();
      allow create, update, delete: if isOwner(userId) || isAdmin();

      // Rules for all subcollections under a user
      match /{allPaths=**} {
        // An admin can read/write any subcollection document.
        // A user can read/write documents in their own subcollections.
        allow read, write: if isAdmin() || isOwner(userId);
      }
    }
    
    // Rule for the collection group 'students'
    match /{path=**}/students/{studentId} {
        // Allow an admin to perform a 'list' query across all users' students subcollections.
        allow list: if isAdmin();
    }

    // Rules for top-level collections accessible by any authenticated user
    match /marketplace_products/{productId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isAdmin();
    }
    
    match /parents/{parentId} {
        allow read, write: if request.auth != null && request.auth.uid == parentId;
    }
  }
}
