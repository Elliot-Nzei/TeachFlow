rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // --- Core Data Ownership Rules ---
    // Users can do anything with documents inside their own user folder.
    match /users/{userId}/{documents=**} {
      allow read, write: if isOwner(userId);
    }
    
    // --- Data Transfer and User Search Rules ---

    // 1. Allow any authenticated user to search for another user by their userCode.
    // This is required to initiate a transfer.
    match /users/{userId} {
      allow list: if request.auth != null;
    }

    // 2. Allow an authenticated user to CREATE a transfer request in another user's inbox.
    match /users/{recipientId}/incomingTransfers/{transferId} {
      allow create: if request.auth != null;
    }

    // 3. Allow a recipient to UPDATE the status of a transfer sent TO them in the SENDER's outbox.
    // This keeps the status in sync for both users.
    match /users/{senderId}/outgoingTransfers/{transferId} {
        allow update: if request.auth != null &&
                      get(/databases/$(database)/documents/users/$(senderId)/outgoingTransfers/$(transferId)).data.toUserId == request.auth.uid;
    }
    
    // 4. Allow a recipient to READ the specific class/student data they are about to accept.
    // This is the key fix for the error you are seeing.
    function hasPendingTransferFor(dataId, senderId) {
      return exists(
        /databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers/
      ) && exists(
        /databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers.where("dataId", "==", dataId).where("fromUserId", "==", senderId)
      );
    }
    
    match /users/{senderId}/classes/{classId} {
        allow get: if request.auth != null && hasPendingTransferFor(classId, senderId);
    }

    match /users/{senderId}/students/{studentId} {
        allow get: if request.auth != null && hasPendingTransferFor(studentId, senderId);
        allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(senderId)/classes/$(request.query.classId)).data.ownerId == senderId;
    }
    
    // Allow the recipient to list students of a class they are about to accept.
    match /users/{senderId}/students/{studentId} {
      allow list: if request.auth != null &&
                   exists(/databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers) &&
                   query.get("classId") in get(/databases/$(database)/documents/users/$(request.auth.uid)/incomingTransfers.where("fromUserId", "==", senderId)).data.map(t => t.dataId);
    }
  }
}
