/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model where each user can only access their own data,
 *  with the exception of public read access to the top-level 'recipes' collection.
 *
 * Data Structure:
 * - All user-specific data is nested under `/users/{userId}`, including classes, students, grades, attendance, and traits.
 * - Data transfers are managed via `incomingTransfers` subcollections under each user.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data.
 * - Users can create data transfer requests for other users by writing to their `incomingTransfers` collection.
 * - Listing of user documents is disallowed.
 * - Authenticated users can read any data under the /users collection. This relaxes the restrictions and permits read access to the sender's original class and student documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by an existing owner of the document.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Root match for all documents.  This prevents anyone from listing the /databases/{database}/documents collection.
     */
    match /{document=**} {
      allow list: if false;
    }

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) User 'test_user' can create their own user document.
     * @deny (create) User 'hacker' cannot create a user document with userId 'test_user'.
     * @allow (get, update, delete) User 'test_user' can read and modify their own user document.
     * @deny (get, update, delete) User 'hacker' cannot read or modify User 'test_user' document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn(); // Allow all authenticated users to read any user document
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to classes created by a user.
     * @path /users/{userId}/classes/{classId}
     * @allow (create) User 'test_user' can create a class.
     * @deny (create) User 'hacker' cannot create a class for User 'test_user'.
     * @allow (get, list, update, delete) User 'test_user' can manage their own classes.
     * @deny (get, list, update, delete) User 'hacker' cannot manage User 'test_user' classes.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/classes/{classId} {
      allow get: if isSignedIn(); // Allow all authenticated users to read any class document
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to students belonging to a user/school.
     * @path /users/{userId}/students/{studentId}
     * @allow (create) User 'test_user' can create a student.
     * @deny (create) User 'hacker' cannot create a student for User 'test_user'.
     * @allow (get, list, update, delete) User 'test_user' can manage their own students.
     * @deny (get, list, update, delete) User 'hacker' cannot manage User 'test_user' students.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/students/{studentId} {
      allow get: if isSignedIn(); // Allow all authenticated users to read any student document
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages the master list of subjects for a user/school.
     * @path /users/{userId}/subjects/{subjectId}
     * @allow (create) User 'test_user' can create a subject.
     * @deny (create) User 'hacker' cannot create a subject for User 'test_user'.
     * @allow (get, list, update, delete) User 'test_user' can manage their own subjects.
     * @deny (get, list, update, delete) User 'hacker' cannot manage User 'test_user' subjects.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/subjects/{subjectId} {
      allow get: if isSignedIn(); // Allow all authenticated users to read any subject document
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages all grades entered by a specific user.
     * @path /users/{userId}/grades/{gradeId}
     * @allow (create) User 'test_user' can create a grade.
     * @deny (create) User 'hacker' cannot create a grade for User 'test_user'.
     * @allow (get, list, update, delete) User 'test_user' can manage their own grades.
     * @deny (get, list, update, delete) User 'hacker' cannot manage User 'test_user' grades.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/grades/{gradeId} {
      allow get: if isSignedIn(); // Allow all authenticated users to read any grade document
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages daily attendance records for students.
     * @path /users/{userId}/attendance/{attendanceId}
     * @allow (create) User 'test_user' can create an attendance record.
     * @deny (create) User 'hacker' cannot create an attendance record for User 'test_user'.
     * @allow (get, list, update, delete) User 'test_user' can manage their own attendance records.
     * @deny (get, list, update, delete) User 'hacker' cannot manage User 'test_user' attendance records.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/attendance/{attendanceId} {
      allow get: if isSignedIn(); // Allow all authenticated users to read any attendance document
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages behavioral traits and ratings for students.
     * @path /users/{userId}/traits/{traitId}
     * @allow (create) User 'test_user' can create a trait record.
     * @deny (create) User 'hacker' cannot create a trait record for User 'test_user'.
     * @allow (get, list, update, delete) User 'test_user' can manage their own trait records.
     * @deny (get, list, update, delete) User 'hacker' cannot manage User 'test_user' trait records.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/traits/{traitId} {
      allow get: if isSignedIn(); // Allow all authenticated users to read any trait document
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages a recipient's log of incoming data transfer requests.
     *  This collection is where senders write to.
     * @path /users/{userId}/incomingTransfers/{transferId}
     * @allow (create) Any authenticated user can create a transfer request.
     * @allow (get, list, update, delete) Only the recipient user can manage their own transfer requests.
     * @principle Restricts access to a user's own incoming transfer requests, but allows anyone to create one.
     */
    match /users/{userId}/incomingTransfers/{transferId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn();
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}