/**
 * @file Firebase Security Rules for TeachFlow School Management System
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model, where users can only
 *   access and modify data that belongs to them. Admin users have elevated permissions to
 *   view platform-wide data for dashboard and management purposes. Public read access is granted to classes.
 *
 * @dataStructure The data is organized under the `/users/{userId}` path, with subcollections for
 *   classes, students, subjects, grades, attendance, traits, payments, timetables and transfers.
 *   Parents have their own top-level collection at `/parents/{parentId}` and can only
 *   access their own data.
 *
 * @keySecurityDecisions
 *   - Admin users can list all users and query collection groups for dashboard data.
 *   - Regular user listing is disallowed for non-admins.
 *   - The 'classes' collection is readable by all authenticated users, with write access restricted to the owner.
 *   - For data transfers, separate collections are used for incoming and outgoing transfers to
 *     simplify authorization logic.
 *   - Flexible data validation is applied, focusing on authorization and relational integrity, not schema compliance.
 *
 * @denormalizationForAuthorization  Admin status is checked via a `get()` call on the user document in the `isAdmin()` function.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the existing owner of the resource, ensuring the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user has an admin role.
     * @principle Admins need elevated permissions to view platform-wide data.
     */
    function isAdmin() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (list) Admin users can list all users for the admin dashboard.
     * @allow (get) Users can read their own profile.
     * @allow (create/update/delete) Users can only modify their own profile.
     * @principle Enforces user-ownership and admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for parent profiles.
     * @path /parents/{parentId}
     * @allow (get) Parents can read their own profile.
     * @allow (create) Parents can create their own profile using their UID as the document ID.
     * @deny (list/update/delete) Parents cannot list, update, or delete profiles.
     * @principle Enforces parent-ownership for profile creation.
     */
    match /parents/{parentId} {
      allow get: if isSignedIn() && request.auth.uid == parentId;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == parentId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for classes belonging to a user.
     * @path /users/{userId}/classes/{classId}
     * @allow (get) Any authenticated user can read a class (for selection purposes).
     * @allow (list) Owner or admin can list classes.
     * @allow (create/update/delete) Only the owner can manage classes.
     * @principle Admins can query all classes via collectionGroup for dashboard statistics.
     */
    match /users/{userId}/classes/{classId} {
      allow get: if isSignedIn();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for students belonging to a user.
     * @path /users/{userId}/students/{studentId}
     * @allow (get) Owner or admin can read student data.
     * @allow (list) Owner or admin can list students.
     * @allow (create/update/delete) Only the owner can manage students.
     * @principle Admins can query all students via collectionGroup for dashboard statistics.
     */
    match /users/{userId}/students/{studentId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for subjects belonging to a user.
     * @path /users/{userId}/subjects/{subjectId}
     * @allow (get/list/create/update/delete) Only the owner can manage subjects.
     * @principle Enforces user-ownership.
     */
    match /users/{userId}/subjects/{subjectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for grades belonging to a user.
     * @path /users/{userId}/grades/{gradeId}
     * @allow (get/list/create/update/delete) Only the owner can manage grades.
     * @principle Enforces user-ownership.
     */
    match /users/{userId}/grades/{gradeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for attendance records belonging to a user.
     * @path /users/{userId}/attendance/{attendanceId}
     * @allow (get/list/create/update/delete) Only the owner can manage attendance.
     * @principle Enforces user-ownership.
     */
    match /users/{userId}/attendance/{attendanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for trait records belonging to a user.
     * @path /users/{userId}/traits/{traitId}
     * @allow (get/list/create/update/delete) Only the owner can manage traits.
     * @principle Enforces user-ownership.
     */
    match /users/{userId}/traits/{traitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for incoming transfer requests.
     * @path /users/{userId}/incomingTransfers/{transferId}
     * @allow (get/list) Only the owner can read incoming transfer requests.
     * @deny (create/delete) No one can create or delete incoming transfers directly.
     * @allow (update) Only the owner can update incoming transfers (e.g., accept/reject).
     * @principle Prevents external creation of transfer requests.
     */
    match /users/{userId}/incomingTransfers/{transferId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for outgoing transfer requests.
     * @path /users/{userId}/outgoingTransfers/{transferId}
     * @allow (get/list/create/update/delete) Only the owner can manage outgoing transfers.
     * @principle Enforces user-ownership.
     */
    match /users/{userId}/outgoingTransfers/{transferId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for payment records belonging to a user.
     * @path /users/{userId}/payments/{paymentId}
     * @allow (get/list/create/update/delete) Only the owner can manage payments.
     * @principle Enforces user-ownership.
     */
    match /users/{userId}/payments/{paymentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for timetables belonging to a user.
     * @path /users/{userId}/timetables/{timetableId}
     * @allow (get/list/create/update/delete) Only the owner can manage timetables.
     * @principle Enforces user-ownership.
     */
    match /users/{userId}/timetables/{timetableId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}