rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Controls access to student documents under a user's profile.
     * @path /databases/{database}/documents/users/{userId}/students/{studentId}
     * @allow (list) User 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1' can list students under their own user ID.
     * @deny (list) User 'someOtherUserId' cannot list students under user ID 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1'.
     * @allow (create) User 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1' can create a student document under their own user ID.
     * @deny (update) User 'someOtherUserId' cannot update a student document under user ID 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1'.
     * @principle Enforces document ownership for writes and restricts listing to owners.
     */
    match /users/{userId}/students/{studentId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow write: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to incoming transfer requests for a user.
     * @path /databases/{database}/documents/users/{userId}/incomingTransfers/{transferId}
     * @allow (get) User 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1' can get incoming transfer requests for their user ID.
     * @deny (list) User 'someOtherUserId' cannot list incoming transfer requests under user ID 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1'.
     * @allow (create) Only the server can create transfer requests.  The document must match the path.
     * @deny (update) User 'someOtherUserId' cannot update an incoming transfer request for user ID 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/incomingTransfers/{transferId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.toUserId == userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to outgoing transfer requests for a user.
     * @path /databases/{database}/documents/users/{userId}/outgoingTransfers/{transferId}
     * @allow (get) User 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1' can get outgoing transfer requests for their user ID.
     * @deny (list) User 'someOtherUserId' cannot list outgoing transfer requests under user ID 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1'.
     * @allow (create) User 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1' can create an outgoing transfer request under their own user ID. The document must match the path.
     * @deny (update) User 'someOtherUserId' cannot update an outgoing transfer request for user ID 'fDtc3Ro9L8VzqNSiXQtYhGEWYef1'.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/outgoingTransfers/{transferId} {
      allow read: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.fromUserId == userId;
      allow update: if false;
      allow delete: if false;
    }
  }
}