/**
 * @file Firebase Security Rules for TeachFlow School Management System
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model, where users can only
 *   access and modify data that belongs to them. Admin users have elevated permissions to
 *   view platform-wide data for dashboard and management purposes.
 *
 * @dataStructure The data is organized under the `/users/{userId}` path, with subcollections for
 *   classes, students, subjects, grades, attendance, traits, payments, timetables and transfers.
 *   Parents have their own top-level collection at `/parents/{parentId}` and can only
 *   access their own data.
 *
 * @keySecurityDecisions
 *   - Admin users can list all users and query collection groups for dashboard data.
 *   - Regular user listing is disallowed for non-admins.
 *   - Collection group queries are explicitly allowed for admins.
 *   - All write operations are restricted to authenticated users.
 *   - Parents can only create and read their own profiles.
 *   - Data consistency is enforced between user IDs in the path and the document data for specific collections.
 *
 * @denormalizationForAuthorization
 *   - The 'role' field is denormalized into the `/users/{userId}` document to avoid costly `get()` operations when checking for admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the existing owner of the resource, ensuring the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user has an admin role.
     * @principle Admins need elevated permissions to view platform-wide data.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (get) Users can read their own profile, or admins can read any profile.
     * @allow (list) Admin users can list all users for the admin dashboard.
     * @allow (create) Users can create their own profile if the userId matches their auth.
     * @allow (update) Users can only modify their own profile.
     * @allow (delete) Users can only delete their own profile.
     * @deny   (get)  Non-owners cannot get other user profiles.
     * @deny   (create) Non-owners cannot create profiles for other users.
     * @deny   (update) Non-owners cannot update other user profiles.
     * @deny   (delete) Non-owners cannot delete other user profiles.
     * @principle Enforces document ownership for writes; allows admin read access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for parent profiles.
     * @path /parents/{parentId}
     * @allow (get) Parents can read their own profile.
     * @allow (create) Parents can create their own profile if the parentId matches their auth.
     * @deny (list) Prevents listing of parent profiles.
     * @deny (update) Parents cannot update their profiles.
     * @deny (delete) Parents cannot delete their profiles.
     * @principle Parents can only create and read their own profiles.
     */
    match /parents/{parentId} {
      allow get: if isOwner(parentId);
      allow list: if false;
      allow create: if isOwner(parentId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for classes belonging to a user.
     * @path /users/{userId}/classes/{classId}
     * @allow (get) Any authenticated user can read a class (for selection purposes).
     * @allow (list) Owner or admin can list classes.
     * @allow (create) Only the owner can create a class.
     * @allow (update) Only the owner can update a class.
     * @allow (delete) Only the owner can delete a class.
     * @deny   (create) Non-owners cannot create classes for other users.
     * @deny   (update) Non-owners cannot update classes for other users.
     * @deny   (delete) Non-owners cannot delete classes for other users.
     * @principle Admins can query all classes via collectionGroup for dashboard statistics.
     */
    match /users/{userId}/classes/{classId} {
      allow get: if isSignedIn();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection group rule for classes.
     * @principle Allows admins to query all classes across all users for dashboard statistics.
     */
    match /{path=**}/classes/{classId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for students belonging to a user.
     * @path /users/{userId}/students/{studentId}
     * @allow (get) Owner or admin can get students.
     * @allow (list) Owner or admin can list students.
     * @allow (create) Only the owner can create a student.
     * @allow (update) Only the owner can update a student.
     * @allow (delete) Only the owner can delete a student.
     * @deny   (create) Non-owners cannot create students for other users.
     * @deny   (update) Non-owners cannot update students for other users.
     * @deny   (delete) Non-owners cannot delete students for other users.
     * @principle Admins can query all students via collectionGroup for dashboard statistics.
     */
    match /users/{userId}/students/{studentId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Collection group rule for students.
     * @principle Allows admins to query all students across all users for dashboard statistics.
     */
    match /{path=**}/students/{studentId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for subjects belonging to a user.
     * @path /users/{userId}/subjects/{subjectId}
     *  @allow (get) Owner can get the subject.
     *  @allow (list) Owner can list the subjects.
     *  @allow (create) Owner can create subjects.
     *  @allow (update) Owner can update subjects.
     *  @allow (delete) Owner can delete subjects.
     * @deny   (create) Non-owners cannot create subjects for other users.
     * @deny   (update) Non-owners cannot update subjects for other users.
     * @deny   (delete) Non-owners cannot delete subjects for other users.
     */
    match /users/{userId}/subjects/{subjectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for grades belonging to a user.
     * @path /users/{userId}/grades/{gradeId}
     *  @allow (get) Owner can get the grades.
     *  @allow (list) Owner can list the grades.
     *  @allow (create) Owner can create grades.
     *  @allow (update) Owner can update grades.
     *  @allow (delete) Owner can delete grades.
     * @deny   (create) Non-owners cannot create grades for other users.
     * @deny   (update) Non-owners cannot update grades for other users.
     * @deny   (delete) Non-owners cannot delete grades for other users.
     */
    match /users/{userId}/grades/{gradeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for attendance records belonging to a user.
     * @path /users/{userId}/attendance/{attendanceId}
     *  @allow (get) Owner can get the attendance.
     *  @allow (list) Owner can list the attendance.
     *  @allow (create) Owner can create attendance.
     *  @allow (update) Owner can update attendance.
     *  @allow (delete) Owner can delete attendance.
     * @deny   (create) Non-owners cannot create attendance for other users.
     * @deny   (update) Non-owners cannot update attendance for other users.
     * @deny   (delete) Non-owners cannot delete attendance for other users.
     */
    match /users/{userId}/attendance/{attendanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for trait records belonging to a user.
     * @path /users/{userId}/traits/{traitId}
     *  @allow (get) Owner can get the traits.
     *  @allow (list) Owner can list the traits.
     *  @allow (create) Owner can create traits.
     *  @allow (update) Owner can update traits.
     *  @allow (delete) Owner can delete traits.
     * @deny   (create) Non-owners cannot create traits for other users.
     * @deny   (update) Non-owners cannot update traits for other users.
     * @deny   (delete) Non-owners cannot delete traits for other users.
     */
    match /users/{userId}/traits/{traitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for incoming transfer requests.
     * @path /users/{userId}/incomingTransfers/{transferId}
     *  @allow (get) Owner can get the incomingTransfers.
     *  @allow (list) Owner can list the incomingTransfers.
     * @deny (create) No one can create incomingTransfers (only the system).
     *  @allow (update) Owner can update incomingTransfers.
     * @deny (delete) No one can delete incomingTransfers.
     */
    match /users/{userId}/incomingTransfers/{transferId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Rules for outgoing transfer requests.
     * @path /users/{userId}/outgoingTransfers/{transferId}
     *  @allow (get) Owner can get the outgoingTransfers.
     *  @allow (list) Owner can list the outgoingTransfers.
     *  @allow (create) Owner can create outgoingTransfers.
     *  @allow (update) Owner can update outgoingTransfers.
     *  @allow (delete) Owner can delete outgoingTransfers.
     */
    match /users/{userId}/outgoingTransfers/{transferId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for payment records belonging to a user.
     * @path /users/{userId}/payments/{paymentId}
     *  @allow (get) Owner can get the payments.
     *  @allow (list) Owner can list the payments.
     *  @allow (create) Owner can create payments.
     *  @allow (update) Owner can update payments.
     *  @allow (delete) Owner can delete payments.
     */
    match /users/{userId}/payments/{paymentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for timetables belonging to a user.
     * @path /users/{userId}/timetables/{timetableId}
     *  @allow (get) Owner can get the timetables.
     *  @allow (list) Owner can list the timetables.
     *  @allow (create) Owner can create timetables.
     *  @allow (update) Owner can update timetables.
     *  @allow (delete) Owner can delete timetables.
     */
    match /users/{userId}/timetables/{timetableId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}