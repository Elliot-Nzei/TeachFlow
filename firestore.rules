/**
 * @fileoverview Firestore Security Rules for the Nigerian School Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only
 * access their own data, with the exception of public read access where explicitly
 * allowed.  Data integrity is prioritized through checks on resource
 * ownership and immutability of key relational fields.
 *
 * Data Structure:
 * The database is organized hierarchically under `/users/{userId}`, where
 * `{userId}` corresponds to the Firebase Auth UID.  Subcollections under each
 * user document store data specific to that user (classes, students, grades, etc.).
 *
 * Key Security Decisions:
 * - Users can only `list` their own subcollections. Listing other users' collections is denied.
 * - Data Transfers act as a ledger between users, but are namespaced to `incomingTransfers`.
 * - The rules do not enforce the complete data schema during write operations,
 *   allowing for rapid prototyping and iteration.  However, authorization-critical
 *   fields are validated for consistency and immutability.
 *
 * Denormalization for Authorization:
 * The rules rely on the `userId` present in the path (`/users/{userId}`) to
 * authorize requests.  This approach avoids the need for additional `get()`
 * calls to retrieve user information, improving performance and reducing costs.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their own profile document with matching userId.
     * @deny (create) User with UID 'user123' attempts to create a profile document for 'user456'.
     * @principle Enforces strict user-ownership for profile creation.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages classes created by a specific user.
     * @path /users/{userId}/classes/{classId}
     * @allow (create) User with UID 'user123' creates a class under their profile.
     * @deny (create) User with UID 'user123' attempts to create a class under 'user456'.
     * @principle Restricts class creation to the owning user.
     */
    match /users/{userId}/classes/{classId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages students belonging to a specific user/school.
     * @path /users/{userId}/students/{studentId}
     * @allow (create) User with UID 'user123' creates a student under their profile.
     * @deny (create) User with UID 'user123' attempts to create a student under 'user456'.
     * @principle Restricts student creation to the owning user.
     */
    match /users/{userId}/students/{studentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages the master list of subjects for a user/school.
     * @path /users/{userId}/subjects/{subjectId}
     * @allow (create) User with UID 'user123' creates a subject under their profile.
     * @deny (create) User with UID 'user123' attempts to create a subject under 'user456'.
     * @principle Restricts subject creation to the owning user.
     */
    match /users/{userId}/subjects/{subjectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages all grades entered by a specific user.
     * @path /users/{userId}/grades/{gradeId}
     * @allow (create) User with UID 'user123' creates a grade under their profile.
     * @deny (create) User with UID 'user123' attempts to create a grade under 'user456'.
     * @principle Restricts grade creation to the owning user.
     */
    match /users/{userId}/grades/{gradeId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages daily attendance records for students.
     * @path /users/{userId}/attendance/{attendanceId}
     * @allow (create) User with UID 'user123' creates attendance record under their profile.
     * @deny (create) User with UID 'user123' attempts to create attendance record under 'user456'.
     * @principle Restricts attendance record creation to the owning user.
     */
    match /users/{userId}/attendance/{attendanceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages behavioral traits and ratings for students.
     * @path /users/{userId}/traits/{traitId}
     * @allow (create) User with UID 'user123' creates a trait record under their profile.
     * @deny (create) User with UID 'user123' attempts to create a trait record under 'user456'.
     * @principle Restricts trait record creation to the owning user.
     */
    match /users/{userId}/traits/{traitId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Manages a recipient's log of incoming data transfer requests.
      * @path users/{userId}/incomingTransfers/{transferId}
      * @allow (create) User with UID 'user456' can create a transfer request in 'user123's incomingTransfers collection if the toUserId matches 'user123'.
      * @deny (create) User with UID 'user456' attempts to create a transfer request in 'user123's incomingTransfers collection but the toUserId does not match 'user123'.
      */
    match /users/{userId}/incomingTransfers/{transferId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if request.resource.data.toUserId == userId && request.resource.data.fromUserId != userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}