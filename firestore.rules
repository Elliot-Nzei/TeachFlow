rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Top-level 'users' collection
    match /users/{userId} {
      // Users can read, create, and update their own profile document
      allow read, create, update: if isOwner(userId);
      allow delete: if false; // Disallow deleting user profiles

      // Rules for the 'incomingTransfers' subcollection
      match /incomingTransfers/{transferId} {
        // A user can read their own incoming transfers
        allow read: if isOwner(userId);
        
        // Any authenticated user can create an incoming transfer request for another user
        allow create: if isAuthenticated() && request.resource.data.toUserId == userId;
        
        // The owner can update the status of their incoming transfers (accept/reject)
        allow update: if isOwner(userId) && 
                        resource.data.status == 'pending' &&
                        request.resource.data.status in ['accepted', 'rejected'];
                        
        allow delete: if isOwner(userId);
      }

      // Rules for the 'outgoingTransfers' subcollection
      match /outgoingTransfers/{transferId} {
        // A user can read their own outgoing transfers
        allow read: if isOwner(userId);
        
        // A user can create their own outgoing transfers
        allow create: if isOwner(userId) && request.resource.data.fromUserId == request.auth.uid;
        
        // The recipient of a transfer can update the status of the sender's outgoing request
        allow update: if (isOwner(userId)) || 
                        (isAuthenticated() && resource.data.toUserId == request.auth.uid);
                        
        allow delete: if isOwner(userId);
      }

      // Wildcard match for all other subcollections under a user's document
      // This includes classes, students, subjects, grades, attendance, etc.
      // It grants full read and write access only to the owner of the parent user document.
      match /{document=**} {
        allow read, write: if isOwner(userId);
      }
    }

    // Allow authenticated users to query the users collection to find a user by their code
    match /users/{userId} {
        allow list: if isAuthenticated();
    }
  }
}
