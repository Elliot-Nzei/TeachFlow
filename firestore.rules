rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Public user counter
    match /metadata/userCount {
      allow get: if true;
      allow write: if isAuthenticated(); // Only allow authenticated users to trigger the write (via transaction)
    }

    // Rules for the top-level 'users' collection
    match /users/{userId} {
      // Allow users to read their own document
      allow get: if isOwner(userId);
      // Allow any authenticated user to search for other users by userCode (for transfers)
      allow list: if isAuthenticated() && request.query.keys.hasAny(['userCode']);
      // Allow users to create and update their own document
      allow write: if isOwner(userId);

      // Rules for classes
      match /classes/{classId} {
        // Owner has full access to their own classes
        allow read, write: if isOwner(userId);
      }
      
      // Rules for students
      match /students/{studentId} {
        allow read, write: if isOwner(userId);
      }

      // Rules for subjects
      match /subjects/{subjectId} {
        allow read, write: if isOwner(userId);
      }

      // Rules for grades
      match /grades/{gradeId} {
        allow read, write: if isOwner(userId);
      }

      // Rules for attendance
      match /attendance/{attendanceId} {
        allow read, write: if isOwner(userId);
      }

      // Rules for traits
      match /traits/{traitId} {
        allow read, write: if isOwner(userId);
      }

      // Rules for payments
      match /payments/{paymentId} {
        allow read, write: if isOwner(userId);
      }

      // Rules for managing INCOMING transfers
      match /incomingTransfers/{transferId} {
        // User can read their own incoming transfers
        allow read: if isOwner(userId);
        // Any authenticated user can create an incoming transfer for another user
        allow create: if isAuthenticated() && request.resource.data.toUserId == userId;
        // User can update and delete their own incoming transfer
        allow update, delete: if isOwner(userId);
      }

      // Rules for managing OUTGOING transfers
      match /outgoingTransfers/{transferId} {
        // User can read and write their own outgoing transfers
        allow read, write: if isOwner(userId);
      }
    }
  }
}
