rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for the top-level 'users' collection
    match /users/{userId} {
      // Allow users to read their own document
      allow get: if isOwner(userId);
      // Allow any authenticated user to search for other users by userCode (for transfers)
      allow list: if isAuthenticated();
      // Allow users to create and update their own document
      allow write: if isOwner(userId);

      // Rules for user-specific subcollections
      match /classes/{classId} {
        allow read, write: if isOwner(userId);
      }
      match /subjects/{subjectId} {
        allow read, write: if isOwner(userId);
      }
      match /grades/{gradeId} {
        allow read, write: if isOwner(userId);
      }
      match /attendance/{attendanceId} {
        allow read, write: if isOwner(userId);
      }
      match /traits/{traitId} {
        allow read, write: if isOwner(userId);
      }
      match /payments/{paymentId} {
        allow read, write: if isOwner(userId);
      }
      match /incomingTransfers/{transferId} {
        allow read: if isOwner(userId);
        allow create: if isAuthenticated() && request.resource.data.toUserId == userId;
        allow update, delete: if isOwner(userId);
      }
      match /outgoingTransfers/{transferId} {
        allow read, write: if isOwner(userId);
        allow get: if isAuthenticated() && resource.data.toUserId == request.auth.uid;
        allow update: if isAuthenticated() && 
                         resource.data.toUserId == request.auth.uid &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'processedAt']);
      }
      match /{subcollection}/{docId} {
        allow read, write: if isOwner(userId);
        match /{nested=**} {
           allow read, write: if isOwner(userId);
        }
      }
    }

    // Rules for the top-level 'students' collection
    match /students/{studentId} {
      // READ for authenticated users on their own students OR for public parent portal
      allow get: if true; // Open for GET to support parent portal and other reads
      allow list: if 
        // Case 1: Authenticated user querying their own students.
        (isAuthenticated() && request.query.limit <= 100 && 'userId' in request.query.where && request.query.where.userId == request.auth.uid) ||
        // Case 2: Public parent portal querying by a specific parentId.
        (request.auth == null && 'parentId' in request.query.where);

      // WRITE for authenticated owners of the student document
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}
