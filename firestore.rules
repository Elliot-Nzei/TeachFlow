/**
 * @file Firestore Security Rules for the Nigerian School Management System.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model, where each user can only
 *                 access data associated with their own user ID.
 *
 * @dataStructure All data (classes, students, subjects, grades, attendance, traits, and incoming transfers)
 *                is nested under the `/users/{userId}` collection, creating a clear hierarchy of ownership.
 *
 * @keySecurityDecisions
 *   - Users can only read and write data within their own user document tree.
 *   - Data Transfers: A user can only create transfer requests that live under another user's `incomingTransfers` collection.
 *   - No public listing of users or other collections is allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures the root user document.
     * @path /users/{userId}
     * @allow (create) - If the authenticated user's ID matches the userId in the path.
     * @allow (get, list, update, delete) - If the authenticated user's ID matches the userId in the path and document exists.
     * @deny (create) - If the authenticated user's ID does not match the userId in the path.
     * @deny (get, list, update, delete) - If the authenticated user's ID does not match the userId in the path or if the document does not exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isExistingOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures classes created by a specific user.
     * @path /users/{userId}/classes/{classId}
     * @allow (create, get, list, update, delete) - If the authenticated user's ID matches the userId in the path and document exists.
     * @deny (create, get, list, update, delete) - If the authenticated user's ID does not match the userId in the path or if the document does not exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/classes/{classId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures students belonging to a specific user/school.
     * @path /users/{userId}/students/{studentId}
     * @allow (create, get, list, update, delete) - If the authenticated user's ID matches the userId in the path and document exists.
     * @deny (create, get, list, update, delete) - If the authenticated user's ID does not match the userId in the path or if the document does not exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/students/{studentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures the master list of subjects for a user/school.
     * @path /users/{userId}/subjects/{subjectId}
     * @allow (create, get, list, update, delete) - If the authenticated user's ID matches the userId in the path and document exists.
     * @deny (create, get, list, update, delete) - If the authenticated user's ID does not match the userId in the path or if the document does not exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/subjects/{subjectId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures all grades entered by a specific user.
     * @path /users/{userId}/grades/{gradeId}
     * @allow (create, get, list, update, delete) - If the authenticated user's ID matches the userId in the path and document exists.
     * @deny (create, get, list, update, delete) - If the authenticated user's ID does not match the userId in the path or if the document does not exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/grades/{gradeId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures daily attendance records for students.
     * @path /users/{userId}/attendance/{attendanceId}
     * @allow (create, get, list, update, delete) - If the authenticated user's ID matches the userId in the path and document exists.
     * @deny (create, get, list, update, delete) - If the authenticated user's ID does not match the userId in the path or if the document does not exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/attendance/{attendanceId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures behavioral traits and ratings for students.
     * @path /users/{userId}/traits/{traitId}
     * @allow (create, get, list, update, delete) - If the authenticated user's ID matches the userId in the path and document exists.
     * @deny (create, get, list, update, delete) - If the authenticated user's ID does not match the userId in the path or if the document does not exist.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/traits/{traitId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

   /**
     * @description Secures a recipient's log of incoming data transfer requests.
     * @path /users/{userId}/incomingTransfers/{transferId}
     * @allow (get, list, update, delete) - If the authenticated user's ID matches the userId in the path and document exists.
     * @allow (create) - If the request is authenticated (any authenticated user can send a transfer request).
     * @deny (get, list, update, delete) - If the authenticated user's ID does not match the userId in the path or if the document does not exist.
     * @principle Restricts writes to the recipient user only. Allows authenticated users to create transfer requests.
     */
    match /users/{userId}/incomingTransfers/{transferId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isExistingOwner(userId);
      allow list: if isOwner(userId);
      allow create: if request.auth != null;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}