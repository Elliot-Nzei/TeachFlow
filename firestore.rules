/**
 * @fileoverview Firestore Security Rules for the Nigerian School Management System.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private data,
 * while allowing public read access to certain collections. All write
 * operations require authentication and proper authorization.
 *
 * Data Structure:
 * - User-specific data is nested under `/users/{userId}`.
 * - Transfer requests (incoming and outgoing) are stored in subcollections
 *   under each user's document.
 *
 * Key Security Decisions:
 * - Users can only read/write their own user data and transfer requests.
 * - Listing of user documents is disallowed to prevent enumeration.
 * - Data validation is relaxed in this prototyping phase to allow for schema evolution,
 *   focusing primarily on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 *  - Transfer documents contain both `fromUserId` and `toUserId` fields, allowing
 *    rules to authorize access based on the current user's ID.
 *
 * Structural Segregation:
 *  - Private user data is stored under `/users/{userId}`, ensuring that
 *    only the authenticated user can access their data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and that the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule set for user documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own document.
     * @deny (create) An unauthenticated user cannot create a user document.
     * @allow (get, update, delete) Authenticated user can access their own document.
     * @deny (get, update, delete) Authenticated user cannot access other user documents.
     * @deny (list) Listing of user documents is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Only allow creating a user document if the authenticated user's ID matches the document ID.
      allow create: if isSignedIn() && isOwner(userId);
      allow get, update, delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rule set for incoming transfer requests for a user.
     * @path /users/{userId}/incomingTransfers/{transferId}
     * @allow (list) Authenticated user can list their own incoming transfer requests.
     * @allow (get) Authenticated user can get their own incoming transfer request.
     * @allow (create) Authenticated user can create transfer request for themself.
     * @allow (update, delete) Authenticated user can update or delete their own incoming transfer request.
     * @deny (get, list, create, update, delete) Authenticated user cannot access other user incoming transfer requests.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/incomingTransfers/{transferId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.toUserId == request.auth.uid;
      allow update, delete: if isExistingOwner(userId) && resource.data.toUserId == request.auth.uid;
    }

    /**
     * @description Rule set for outgoing transfer requests initiated by a user.
     * @path /users/{userId}/outgoingTransfers/{transferId}
     * @allow (list) Authenticated user can list their own outgoing transfer requests.
     * @allow (get) Authenticated user can get their own outgoing transfer request.
     * @allow (create) Authenticated user can create outgoing transfer request for themself.
     * @allow (update, delete) Authenticated user can update or delete their own outgoing transfer request.
     * @deny (get, list, create, update, delete) Authenticated user cannot access other user outgoing transfer requests.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/outgoingTransfers/{transferId} {
      allow get, list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.fromUserId == request.auth.uid;
      allow update, delete: if isExistingOwner(userId) && resource.data.fromUserId == request.auth.uid;
    }
  }
}